{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `posts/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      required: true,\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n      default: [],\n    },\n    featured: {\n      type: 'boolean',\n      default: false,\n    },\n    draft: {\n      type: 'boolean',\n      default: false,\n    },\n    image: {\n      type: 'string',\n      required: false,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (post) => post._raw.flattenedPath.replace(/^posts\\//, ''),\n    },\n    readingTime: {\n      type: 'number',\n      resolve: (post) => {\n        const wordsPerMinute = 200;\n        const wordCount = post.body.raw.split(/\\s+/).length;\n        return Math.ceil(wordCount / wordsPerMinute);\n      },\n    },\n  },\n}));\n\nexport const Project = defineDocumentType(() => ({\n  name: 'Project',\n  filePathPattern: `projects/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      required: true,\n    },\n    stack: {\n      type: 'list',\n      of: { type: 'string' },\n      required: true,\n    },\n    repo: {\n      type: 'string',\n      required: false,\n    },\n    live: {\n      type: 'string',\n      required: false,\n    },\n    thumbnail: {\n      type: 'string',\n      required: false,\n    },\n    featured: {\n      type: 'boolean',\n      default: false,\n    },\n    sortOrder: {\n      type: 'number',\n      default: 0,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (project) => project._raw.flattenedPath.replace(/^projects\\//, ''),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: './content',\n  documentTypes: [Post, Project],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      // Temporarily disable rehype-pretty-code due to type conflicts\n      // [\n      //   rehypePrettyCode,\n      //   {\n      //     theme: 'github-dark',\n      //   },\n      // ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['subheading-anchor'],\n            ariaLabel: 'Link to section',\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAEf,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,SAAS,CAAC;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,KAAK,KAAK,cAAc,QAAQ,YAAY,EAAE;AAAA,IACnE;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,SAAS;AACjB,cAAM,iBAAiB;AACvB,cAAM,YAAY,KAAK,KAAK,IAAI,MAAM,KAAK,EAAE;AAC7C,eAAO,KAAK,KAAK,YAAY,cAAc;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,QAAQ,KAAK,cAAc,QAAQ,eAAe,EAAE;AAAA,IAC5E;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,OAAO;AAAA,EAC7B,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,mBAAmB;AAAA,YAC/B,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
